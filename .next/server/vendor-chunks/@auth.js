"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@auth";
exports.ids = ["vendor-chunks/@auth"];
exports.modules = {

/***/ "(rsc)/./node_modules/@auth/firebase-adapter/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@auth/firebase-adapter/index.js ***!
  \******************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FirestoreAdapter: () => (/* binding */ FirestoreAdapter),\n/* harmony export */   collectionsFactory: () => (/* binding */ collectionsFactory),\n/* harmony export */   getDoc: () => (/* binding */ getDoc),\n/* harmony export */   getOneDoc: () => (/* binding */ getOneDoc),\n/* harmony export */   initFirestore: () => (/* binding */ initFirestore),\n/* harmony export */   mapFieldsFactory: () => (/* binding */ mapFieldsFactory)\n/* harmony export */ });\n/* harmony import */ var firebase_admin_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase-admin/app */ \"firebase-admin/app\");\n/* harmony import */ var firebase_admin_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase-admin/firestore */ \"firebase-admin/firestore\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([firebase_admin_app__WEBPACK_IMPORTED_MODULE_0__, firebase_admin_firestore__WEBPACK_IMPORTED_MODULE_1__]);\n([firebase_admin_app__WEBPACK_IMPORTED_MODULE_0__, firebase_admin_firestore__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n/**\n * <div style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", padding: 16}}>\n *  <p>Official **Firestore** adapter for Auth.js / NextAuth.js, using the [Firebase Admin SDK](https://firebase.google.com/docs/admin/setup)</p>\n *  <a href=\"https://firebase.google.com/docs/firestore/\">\n *   <img style={{display: \"block\"}} src=\"/img/adapters/firebase.svg\" width=\"48\" />\n *  </a>\n * </div>\n *\n * ## Installation\n *\n * ```bash npm2yarn\n * npm install @auth/firebase-adapter firebase-admin\n * ```\n *\n * @module @auth/firebase-adapter\n */\n\n\nfunction FirestoreAdapter(config) {\n    const { db, namingStrategy = \"default\", collections = {}, } = config instanceof firebase_admin_firestore__WEBPACK_IMPORTED_MODULE_1__.Firestore\n        ? { db: config }\n        : { ...config, db: config?.firestore ?? initFirestore(config) };\n    const preferSnakeCase = namingStrategy === \"snake_case\";\n    const C = collectionsFactory(db, preferSnakeCase, {\n        users: \"users\",\n        sessions: \"sessions\",\n        accounts: \"accounts\",\n        verificationTokens: preferSnakeCase\n            ? \"verification_tokens\"\n            : \"verificationTokens\",\n        ...collections,\n    });\n    const mapper = mapFieldsFactory(preferSnakeCase);\n    return {\n        async createUser(userInit) {\n            const { id: userId } = await C.users.add(userInit);\n            const user = await getDoc(C.users.doc(userId));\n            if (!user)\n                throw new Error(\"[createUser] Failed to fetch created user\");\n            return user;\n        },\n        async getUser(id) {\n            return await getDoc(C.users.doc(id));\n        },\n        async getUserByEmail(email) {\n            return await getOneDoc(C.users.where(\"email\", \"==\", email));\n        },\n        async getUserByAccount({ provider, providerAccountId }) {\n            const account = await getOneDoc(C.accounts\n                .where(\"provider\", \"==\", provider)\n                .where(mapper.toDb(\"providerAccountId\"), \"==\", providerAccountId));\n            if (!account)\n                return null;\n            return await getDoc(C.users.doc(account.userId));\n        },\n        async updateUser(partialUser) {\n            if (!partialUser.id)\n                throw new Error(\"[updateUser] Missing id\");\n            const userRef = C.users.doc(partialUser.id);\n            await userRef.set(partialUser, { merge: true });\n            const user = await getDoc(userRef);\n            if (!user)\n                throw new Error(\"[updateUser] Failed to fetch updated user\");\n            return user;\n        },\n        async deleteUser(userId) {\n            await db.runTransaction(async (transaction) => {\n                const accounts = await C.accounts\n                    .where(mapper.toDb(\"userId\"), \"==\", userId)\n                    .get();\n                const sessions = await C.sessions\n                    .where(mapper.toDb(\"userId\"), \"==\", userId)\n                    .get();\n                transaction.delete(C.users.doc(userId));\n                accounts.forEach((account) => transaction.delete(account.ref));\n                sessions.forEach((session) => transaction.delete(session.ref));\n            });\n        },\n        async linkAccount(accountInit) {\n            const ref = await C.accounts.add(accountInit);\n            const account = await ref.get().then((doc) => doc.data());\n            return account ?? null;\n        },\n        async unlinkAccount({ provider, providerAccountId }) {\n            await deleteDocs(C.accounts\n                .where(\"provider\", \"==\", provider)\n                .where(mapper.toDb(\"providerAccountId\"), \"==\", providerAccountId)\n                .limit(1));\n        },\n        async createSession(sessionInit) {\n            const ref = await C.sessions.add(sessionInit);\n            const session = await ref.get().then((doc) => doc.data());\n            if (session)\n                return session ?? null;\n            throw new Error(\"[createSession] Failed to fetch created session\");\n        },\n        async getSessionAndUser(sessionToken) {\n            const session = await getOneDoc(C.sessions.where(mapper.toDb(\"sessionToken\"), \"==\", sessionToken));\n            if (!session)\n                return null;\n            const user = await getDoc(C.users.doc(session.userId));\n            if (!user)\n                return null;\n            return { session, user };\n        },\n        async updateSession(partialSession) {\n            const sessionId = await db.runTransaction(async (transaction) => {\n                const sessionSnapshot = (await transaction.get(C.sessions\n                    .where(mapper.toDb(\"sessionToken\"), \"==\", partialSession.sessionToken)\n                    .limit(1))).docs[0];\n                if (!sessionSnapshot?.exists)\n                    return null;\n                transaction.set(sessionSnapshot.ref, partialSession, { merge: true });\n                return sessionSnapshot.id;\n            });\n            if (!sessionId)\n                return null;\n            const session = await getDoc(C.sessions.doc(sessionId));\n            if (session)\n                return session;\n            throw new Error(\"[updateSession] Failed to fetch updated session\");\n        },\n        async deleteSession(sessionToken) {\n            await deleteDocs(C.sessions\n                .where(mapper.toDb(\"sessionToken\"), \"==\", sessionToken)\n                .limit(1));\n        },\n        async createVerificationToken(verificationToken) {\n            await C.verification_tokens.add(verificationToken);\n            return verificationToken;\n        },\n        async useVerificationToken({ identifier, token }) {\n            const verificationTokenSnapshot = (await C.verification_tokens\n                .where(\"identifier\", \"==\", identifier)\n                .where(\"token\", \"==\", token)\n                .limit(1)\n                .get()).docs[0];\n            if (!verificationTokenSnapshot)\n                return null;\n            const data = verificationTokenSnapshot.data();\n            await verificationTokenSnapshot.ref.delete();\n            return data;\n        },\n    };\n}\n// for consistency, store all fields as snake_case in the database\nconst MAP_TO_FIRESTORE = {\n    userId: \"user_id\",\n    sessionToken: \"session_token\",\n    providerAccountId: \"provider_account_id\",\n    emailVerified: \"email_verified\",\n};\nconst MAP_FROM_FIRESTORE = {};\nfor (const key in MAP_TO_FIRESTORE) {\n    MAP_FROM_FIRESTORE[MAP_TO_FIRESTORE[key]] = key;\n}\nconst identity = (x) => x;\n/** @internal */\nfunction mapFieldsFactory(preferSnakeCase) {\n    if (preferSnakeCase) {\n        return {\n            toDb: (field) => MAP_TO_FIRESTORE[field] ?? field,\n            fromDb: (field) => MAP_FROM_FIRESTORE[field] ?? field,\n        };\n    }\n    return { toDb: identity, fromDb: identity };\n}\nfunction getConverter(options) {\n    const mapper = mapFieldsFactory(options?.preferSnakeCase);\n    return {\n        toFirestore(object) {\n            const document = {};\n            for (const key in object) {\n                if (key === \"id\")\n                    continue;\n                const value = object[key];\n                if (value !== undefined) {\n                    document[mapper.toDb(key)] = value;\n                }\n                else {\n                    console.warn(`FirebaseAdapter: value for key \"${key}\" is undefined`);\n                }\n            }\n            return document;\n        },\n        fromFirestore(snapshot) {\n            const document = snapshot.data(); // we can guarantee it exists\n            const object = {};\n            if (!options?.excludeId) {\n                object.id = snapshot.id;\n            }\n            for (const key in document) {\n                let value = document[key];\n                if (value instanceof firebase_admin_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp)\n                    value = value.toDate();\n                object[mapper.fromDb(key)] = value;\n            }\n            return object;\n        },\n    };\n}\n/** @internal */\nasync function getOneDoc(querySnapshot) {\n    const querySnap = await querySnapshot.limit(1).get();\n    return querySnap.docs[0]?.data() ?? null;\n}\nasync function deleteDocs(querySnapshot) {\n    const querySnap = await querySnapshot.get();\n    for (const doc of querySnap.docs) {\n        await doc.ref.delete();\n    }\n}\n/** @internal */\nasync function getDoc(docRef) {\n    const docSnap = await docRef.get();\n    return docSnap.data() ?? null;\n}\n/** @internal */\nfunction collectionsFactory(db, preferSnakeCase = false, collections) {\n    return {\n        users: db\n            .collection(collections.users)\n            .withConverter(getConverter({ preferSnakeCase })),\n        sessions: db\n            .collection(collections.sessions)\n            .withConverter(getConverter({ preferSnakeCase })),\n        accounts: db\n            .collection(collections.accounts)\n            .withConverter(getConverter({ preferSnakeCase })),\n        verification_tokens: db\n            .collection(collections.verificationTokens)\n            .withConverter(getConverter({ preferSnakeCase, excludeId: true })),\n    };\n}\n/**\n * Utility function that helps making sure that there is no duplicate app initialization issues in serverless environments.\n * If no parameter is passed, it will use the `GOOGLE_APPLICATION_CREDENTIALS` environment variable to initialize a Firestore instance.\n *\n * @example\n * ```ts title=\"lib/firestore.ts\"\n * import { initFirestore } from \"@auth/firebase-adapter\"\n * import { cert } from \"firebase-admin/app\"\n *\n * export const firestore = initFirestore({\n *  credential: cert({\n *    projectId: process.env.FIREBASE_PROJECT_ID,\n *    clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\n *    privateKey: process.env.FIREBASE_PRIVATE_KEY,\n *  })\n * })\n * ```\n */\nfunction initFirestore(options = {}) {\n    const apps = (0,firebase_admin_app__WEBPACK_IMPORTED_MODULE_0__.getApps)();\n    const app = options.name ? apps.find((a) => a.name === options.name) : apps[0];\n    if (app)\n        return (0,firebase_admin_firestore__WEBPACK_IMPORTED_MODULE_1__.getFirestore)(app);\n    return (0,firebase_admin_firestore__WEBPACK_IMPORTED_MODULE_1__.initializeFirestore)((0,firebase_admin_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp)(options, options.name));\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@auth/firebase-adapter/index.js\n");

/***/ })

};
;